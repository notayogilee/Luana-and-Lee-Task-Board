{"version":3,"sources":["initial-data.js","components/Task.js","components/Column.js","App.js","index.js"],"names":["initialData","tasks","id","content","columns","title","taskIds","columnOrder","Container","styled","div","props","isDragging","Task","task","index","draggableId","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","Title","h3","TaskList","isDraggingOver","Column","column","droppableId","type","droppableProps","map","key","placeholder","App","useState","data","setData","onDragStart","document","body","style","color","onDragUpdate","update","destination","onDragEnd","result","source","start","finish","startTaskIds","Array","from","splice","newStart","finishedTaskIds","newFinish","newData","newTaskIds","newColumn","newColumnOrder","direction","columnId","columnTasks","taskId","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7818ec48.chunk.js","sourcesContent":["const initialData = {\n  tasks: {\n    'task-1': { id: 'task-1', content: 'Take out the garbage' },\n    'task-2': { id: 'task-2', content: 'Write some code' },\n    'task-3': { id: 'task-3', content: 'Make supper' },\n    'task-4': { id: 'task-4', content: 'Go to sleep' }\n  },\n  columns: {\n    'column-1': {\n      id: 'column-1',\n      title: \"To do\",\n      taskIds: ['task-1', 'task-2', 'task-3', 'task-4']\n    },\n    'column-2': {\n      id: 'column-2',\n      title: \"In Progress\",\n      taskIds: []\n    },\n    'column-3': {\n      id: 'column-3',\n      title: \"Done\",\n      taskIds: []\n    }\n  },\n\n  // Facilitate reordering of the columns\n  columnOrder: ['column-1', 'column-2', 'column-3']\n};\n\nexport default initialData;","import React from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd';\n\nconst Container = styled.div`\nborder: 1px solid lightgrey;\npadding: 8px;\nmargin-bottom: 8px;\nborder-radius: 2px;\nbackground-color: ${props => (props.isDragging ? 'lightgreen' : 'white')};\n`;\n// Drag handle if you only want to grab a small part (handle) to drag\n// Need to remove dragHandleProps for this to work\n\n// const Handle = styled.div`\n// width: 20px;\n// height: 20px;\n// background-color: orange;\n// border-radius: 4px;\n// margin-right: 8px;\n// `;\n\nconst Task = ({ task, index }) => {\n  return (\n    <Draggable draggableId={task.id} index={index}>\n      {(provided, snapshot) => (\n        <Container\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n          isDragging={snapshot.isDragging}\n        >\n          {/* <Handle {...provided.dragHandleProps} /> */}\n          {task.content}\n        </Container>\n      )}\n    </Draggable>\n  )\n}\n\nexport default Task;\n\n\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport Task from '../components/Task';\n\nconst Container = styled.div`\nmargin: 8px;\nborder: 1px solid lightgrey;\nbackground-color: white;\nborder-radius: 2px;\nwidth: 220px;\n\ndisplay: flex;\nflex-direction: column;\n`;\nconst Title = styled.h3`\npadding: 8px;\n`;\nconst TaskList = styled.div`\npadding: 8px;\nbackground-color: ${props => (props.isDraggingOver ? 'skyblue' : 'inherit')};\nflex-grow: 1;\nmin-height: 100px;\n    `;\n\n// Need min-height to be able to drag and drop onto empty column\n\nconst Column = ({ column, tasks, index }) => {\n  return (\n    <Draggable draggableId={column.id} index={index}>\n      {provided => (\n        <Container\n          {...provided.draggableProps}\n          ref={provided.innerRef}\n        >\n          <Title\n            {...provided.dragHandleProps}\n          >\n            {column.title}</Title>\n          <Droppable droppableId={column.id} type=\"task\">\n            {(provided, snapshot) => (\n\n              <TaskList\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                isDraggingOver={snapshot.isDraggingOver}\n              >\n                {tasks.map((task, index) =>\n                  <Task key={task.id} task={task} index={index} />\n                )}\n                {provided.placeholder}\n              </TaskList>\n            )}\n          </Droppable>\n        </Container>\n      )\n      }\n    </Draggable>\n  )\n};\n\nexport default Column;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './components/Column';\n\nconst Container = styled.div`\ndisplay: flex;\n`;\n\n\nfunction App() {\n\n\n  const [data, setData] = useState(initialData);\n  const { columnOrder, columns, tasks } = data;\n  const [columnsState, setColumnsState] = useState(columns);\n\n  // Add style to drags\n\n  const onDragStart = () => {\n    document.body.style.color = 'orange';\n    // transition on background color\n    // document.body.style.transition = 'background-color 0.2s ease';\n  }\n\n  const onDragUpdate = update => {\n    // change background color moving down or up column\n    const { destination } = update;\n    // const opacity = destination\n    //   ? destination.index / Object.keys(tasks).length : 0;\n    // document.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity})`\n  }\n\n  // reset style after drag ends\n  const onDragEnd = result => {\n    document.body.style.color = 'inherit';\n    // document.body.style.backgroundColor = 'inherit';\n\n\n    const { destination, source, draggableId, type } = result;\n\n    // Moving tasks within same column\n\n    if (!destination) { return; }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    // to tell if re-ordering task or column\n    if (type === 'column') {\n      const newColumnOrder = Array.from(columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n\n      const newData = {\n        ...data,\n        columnOrder: newColumnOrder\n      };\n\n      setData(newData);\n      return;\n    }\n\n    const start = columns[source.droppableId];\n    const finish = columns[destination.droppableId];\n\n    if (start === finish) {\n      const newTaskIds = Array.from(start.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      const newColumn = {\n        ...start,\n        taskIds: newTaskIds\n      };\n\n      const newData = {\n        ...data,\n        columns: {\n          ...columns,\n\n          [newColumn.id]: newColumn\n        }\n      }\n      setData(newData);\n      return;\n    }\n\n    // Moving from one list to another\n\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds,\n    };\n\n    const finishedTaskIds = Array.from(finish.taskIds);\n    finishedTaskIds.splice(destination.index, 0, draggableId);\n\n    const newFinish = {\n      ...finish,\n      taskIds: finishedTaskIds\n    };\n\n    const newData = {\n      ...data,\n      columns: {\n        ...columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    };\n    setData(newData);\n    return;\n  };\n\n  return (\n    <DragDropContext\n      onDragStart={onDragStart}\n      onDragUpdate={onDragUpdate}\n      onDragEnd={onDragEnd}\n    >\n      <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"column\">\n        {provided => (\n          <Container\n            {...provided.droppableProps}\n            ref={provided.innerRef}\n          >\n\n            {columnOrder.map((columnId, index) => {\n              const column = columns[columnId];\n              const columnTasks = column.taskIds.map(taskId => tasks[taskId]);\n\n              return <Column key={column.id} column={column} tasks={columnTasks} index={index} />;\n            })}\n            {provided.placeholder}\n          </Container>\n        )}\n      </Droppable>\n    </DragDropContext>\n  )\n};\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}